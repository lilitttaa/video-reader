const {app, BrowserWindow, nativeImage } = require('electron')
const path = require('path')

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// declare const MAIN_WINDOW_WEBPACK_ENTRY: string
// declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

const createWindow = async (isFullScreen) => {
  const window = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
    }
  })

  window.addListener('close', () => {})

  // and load the index.html of the app.
  window.loadURL('http://localhost:3000')//'./build/index.html'
  if (isFullScreen) {
    window.maximize()
  }
}

const onReady = async () => {
  // Create the browser window.
  createWindow(true)

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();

  // 安装开发工具
  // const reduxDevToolPath = path.join(app.getAppPath(), '/devtools/lmhkpmbekcpmknklioeibfkpmmfibljd/3.0.19_0');
  // await session.defaultSession.loadExtension(reduxDevToolPath);
  // const reactDevToolPath = path.join(app.getAppPath(), '/devtools/fmkadmapgofadopljbjfkapdkoienihi/4.28.0_0');
  // await session.defaultSession.loadExtension(reactDevToolPath);
}

app.whenReady().then(async () => {})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', onReady)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    onReady()
  }
})
